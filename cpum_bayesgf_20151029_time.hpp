// Code generated by Stan version 2.8

#include <stan/model/model_header.hpp>

namespace cpum_bayesgf_20151029_time_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
class cpum_bayesgf_20151029_time_model : public prob_grad {
private:
    int N;
    int J;
    int minT;
    int maxT;
    int obscomplete;
    int obs;
    row_vector_d id;
    row_vector_d wlm;
    row_vector_d cumwlm;
    row_vector_d cumwlm2lag;
    row_vector_d atwork;
    row_vector_d atwork2lag;
    row_vector_d ageout;
    row_vector_d dateout;
    row_vector_d cohort_1;
    row_vector_d BL_cumwlm;
    row_vector_d BL_cumyrsexp;
    row_vector_d cumyrsexp;
    row_vector_d cumyrsexp2lag;
    vector<int> leftwork;
    vector<int> d_lc;
    vector<int> d_nonlc;
    row_vector_d id_full;
    row_vector_d cohort_1_full;
    row_vector_d age_full;
    row_vector_d date_full;
    row_vector_d smoke3_2_full;
    row_vector_d minage_full;
    row_vector_d maxage_full;
    row_vector_d BL_cumwlm_full;
    row_vector_d BL_cumyrsexp_full;
    row_vector_d ageoutcen;
    row_vector_d dateoutcen;
    row_vector_d BL_cumwlmcen;
    row_vector_d BL_cumyrsexpcen;
    row_vector_d cumyrsexpcen;
    row_vector_d cumyrsexp2lagcen;
    row_vector_d cumwlm2lagcen;
    row_vector_d sqrt_cumwlm2lag;
    row_vector_d sqrt_BL_cumwlm;
    row_vector_d age_fullcen;
    row_vector_d date_fullcen;
    row_vector_d BL_cumwlm_fullcen;
    row_vector_d BL_cumyrsexp_fullcen;
    double meanageout;
    double sdageout;
    double meandateout;
    double sddateout;
    double meanBL_cumwlm;
    double meanBL_cumyrsexp;
    double meancumyrsexp;
    double meancumyrsexp2lag;
    double meancumwlm2lag;
    double sdBL_cumwlm;
    double sdBL_cumyrsexp;
    double sdcumyrsexp;
    double sdcumyrsexp2lag;
    double sdcumwlm2lag;
public:
    cpum_bayesgf_20151029_time_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "cpum_bayesgf_20151029_time_model_namespace::cpum_bayesgf_20151029_time_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "J", "int", context__.to_vec());
        J = int(0);
        vals_i__ = context__.vals_i("J");
        pos__ = 0;
        J = vals_i__[pos__++];
        context__.validate_dims("data initialization", "minT", "int", context__.to_vec());
        minT = int(0);
        vals_i__ = context__.vals_i("minT");
        pos__ = 0;
        minT = vals_i__[pos__++];
        context__.validate_dims("data initialization", "maxT", "int", context__.to_vec());
        maxT = int(0);
        vals_i__ = context__.vals_i("maxT");
        pos__ = 0;
        maxT = vals_i__[pos__++];
        context__.validate_dims("data initialization", "obscomplete", "int", context__.to_vec());
        obscomplete = int(0);
        vals_i__ = context__.vals_i("obscomplete");
        pos__ = 0;
        obscomplete = vals_i__[pos__++];
        context__.validate_dims("data initialization", "obs", "int", context__.to_vec());
        obs = int(0);
        vals_i__ = context__.vals_i("obs");
        pos__ = 0;
        obs = vals_i__[pos__++];
        context__.validate_dims("data initialization", "id", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("id", "obscomplete", obscomplete);
        id = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("id");
        pos__ = 0;
        size_t id_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < id_i_vec_lim__; ++i_vec__) {
            id[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "wlm", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("wlm", "obscomplete", obscomplete);
        wlm = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("wlm");
        pos__ = 0;
        size_t wlm_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < wlm_i_vec_lim__; ++i_vec__) {
            wlm[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cumwlm", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("cumwlm", "obscomplete", obscomplete);
        cumwlm = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("cumwlm");
        pos__ = 0;
        size_t cumwlm_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < cumwlm_i_vec_lim__; ++i_vec__) {
            cumwlm[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cumwlm2lag", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("cumwlm2lag", "obscomplete", obscomplete);
        cumwlm2lag = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("cumwlm2lag");
        pos__ = 0;
        size_t cumwlm2lag_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < cumwlm2lag_i_vec_lim__; ++i_vec__) {
            cumwlm2lag[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "atwork", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("atwork", "obscomplete", obscomplete);
        atwork = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("atwork");
        pos__ = 0;
        size_t atwork_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < atwork_i_vec_lim__; ++i_vec__) {
            atwork[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "atwork2lag", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("atwork2lag", "obscomplete", obscomplete);
        atwork2lag = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("atwork2lag");
        pos__ = 0;
        size_t atwork2lag_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < atwork2lag_i_vec_lim__; ++i_vec__) {
            atwork2lag[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "ageout", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("ageout", "obscomplete", obscomplete);
        ageout = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("ageout");
        pos__ = 0;
        size_t ageout_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < ageout_i_vec_lim__; ++i_vec__) {
            ageout[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "dateout", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("dateout", "obscomplete", obscomplete);
        dateout = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("dateout");
        pos__ = 0;
        size_t dateout_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < dateout_i_vec_lim__; ++i_vec__) {
            dateout[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cohort_1", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("cohort_1", "obscomplete", obscomplete);
        cohort_1 = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("cohort_1");
        pos__ = 0;
        size_t cohort_1_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < cohort_1_i_vec_lim__; ++i_vec__) {
            cohort_1[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "BL_cumwlm", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("BL_cumwlm", "obscomplete", obscomplete);
        BL_cumwlm = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("BL_cumwlm");
        pos__ = 0;
        size_t BL_cumwlm_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < BL_cumwlm_i_vec_lim__; ++i_vec__) {
            BL_cumwlm[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "BL_cumyrsexp", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("BL_cumyrsexp", "obscomplete", obscomplete);
        BL_cumyrsexp = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("BL_cumyrsexp");
        pos__ = 0;
        size_t BL_cumyrsexp_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < BL_cumyrsexp_i_vec_lim__; ++i_vec__) {
            BL_cumyrsexp[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cumyrsexp", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("cumyrsexp", "obscomplete", obscomplete);
        cumyrsexp = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("cumyrsexp");
        pos__ = 0;
        size_t cumyrsexp_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < cumyrsexp_i_vec_lim__; ++i_vec__) {
            cumyrsexp[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cumyrsexp2lag", "row_vector_d", context__.to_vec(obscomplete));
        validate_non_negative_index("cumyrsexp2lag", "obscomplete", obscomplete);
        cumyrsexp2lag = row_vector_d(obscomplete);
        vals_r__ = context__.vals_r("cumyrsexp2lag");
        pos__ = 0;
        size_t cumyrsexp2lag_i_vec_lim__ = obscomplete;
        for (size_t i_vec__ = 0; i_vec__ < cumyrsexp2lag_i_vec_lim__; ++i_vec__) {
            cumyrsexp2lag[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "leftwork", "int", context__.to_vec(obscomplete));
        validate_non_negative_index("leftwork", "obscomplete", obscomplete);
        leftwork = std::vector<int>(obscomplete,int(0));
        vals_i__ = context__.vals_i("leftwork");
        pos__ = 0;
        size_t leftwork_limit_0__ = obscomplete;
        for (size_t i_0__ = 0; i_0__ < leftwork_limit_0__; ++i_0__) {
            leftwork[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "d_lc", "int", context__.to_vec(obscomplete));
        validate_non_negative_index("d_lc", "obscomplete", obscomplete);
        d_lc = std::vector<int>(obscomplete,int(0));
        vals_i__ = context__.vals_i("d_lc");
        pos__ = 0;
        size_t d_lc_limit_0__ = obscomplete;
        for (size_t i_0__ = 0; i_0__ < d_lc_limit_0__; ++i_0__) {
            d_lc[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "d_nonlc", "int", context__.to_vec(obscomplete));
        validate_non_negative_index("d_nonlc", "obscomplete", obscomplete);
        d_nonlc = std::vector<int>(obscomplete,int(0));
        vals_i__ = context__.vals_i("d_nonlc");
        pos__ = 0;
        size_t d_nonlc_limit_0__ = obscomplete;
        for (size_t i_0__ = 0; i_0__ < d_nonlc_limit_0__; ++i_0__) {
            d_nonlc[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "id_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("id_full", "obs", obs);
        id_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("id_full");
        pos__ = 0;
        size_t id_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < id_full_i_vec_lim__; ++i_vec__) {
            id_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "cohort_1_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("cohort_1_full", "obs", obs);
        cohort_1_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("cohort_1_full");
        pos__ = 0;
        size_t cohort_1_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < cohort_1_full_i_vec_lim__; ++i_vec__) {
            cohort_1_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "age_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("age_full", "obs", obs);
        age_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("age_full");
        pos__ = 0;
        size_t age_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < age_full_i_vec_lim__; ++i_vec__) {
            age_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "date_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("date_full", "obs", obs);
        date_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("date_full");
        pos__ = 0;
        size_t date_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < date_full_i_vec_lim__; ++i_vec__) {
            date_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "smoke3_2_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("smoke3_2_full", "obs", obs);
        smoke3_2_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("smoke3_2_full");
        pos__ = 0;
        size_t smoke3_2_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < smoke3_2_full_i_vec_lim__; ++i_vec__) {
            smoke3_2_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "minage_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("minage_full", "obs", obs);
        minage_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("minage_full");
        pos__ = 0;
        size_t minage_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < minage_full_i_vec_lim__; ++i_vec__) {
            minage_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "maxage_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("maxage_full", "obs", obs);
        maxage_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("maxage_full");
        pos__ = 0;
        size_t maxage_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < maxage_full_i_vec_lim__; ++i_vec__) {
            maxage_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "BL_cumwlm_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("BL_cumwlm_full", "obs", obs);
        BL_cumwlm_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("BL_cumwlm_full");
        pos__ = 0;
        size_t BL_cumwlm_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < BL_cumwlm_full_i_vec_lim__; ++i_vec__) {
            BL_cumwlm_full[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "BL_cumyrsexp_full", "row_vector_d", context__.to_vec(obs));
        validate_non_negative_index("BL_cumyrsexp_full", "obs", obs);
        BL_cumyrsexp_full = row_vector_d(obs);
        vals_r__ = context__.vals_r("BL_cumyrsexp_full");
        pos__ = 0;
        size_t BL_cumyrsexp_full_i_vec_lim__ = obs;
        for (size_t i_vec__ = 0; i_vec__ < BL_cumyrsexp_full_i_vec_lim__; ++i_vec__) {
            BL_cumyrsexp_full[i_vec__] = vals_r__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"J",J,0);
        check_greater_or_equal(function__,"minT",minT,0);
        check_greater_or_equal(function__,"maxT",maxT,0);
        check_greater_or_equal(function__,"obscomplete",obscomplete,0);
        check_greater_or_equal(function__,"obs",obs,0);
        for (int k0__ = 0; k0__ < obscomplete; ++k0__) {
            check_greater_or_equal(function__,"leftwork[k0__]",leftwork[k0__],0);
            check_less_or_equal(function__,"leftwork[k0__]",leftwork[k0__],1);
        }
        for (int k0__ = 0; k0__ < obscomplete; ++k0__) {
            check_greater_or_equal(function__,"d_lc[k0__]",d_lc[k0__],0);
            check_less_or_equal(function__,"d_lc[k0__]",d_lc[k0__],1);
        }
        for (int k0__ = 0; k0__ < obscomplete; ++k0__) {
            check_greater_or_equal(function__,"d_nonlc[k0__]",d_nonlc[k0__],0);
            check_less_or_equal(function__,"d_nonlc[k0__]",d_nonlc[k0__],1);
        }
        validate_non_negative_index("ageoutcen", "obscomplete", obscomplete);
        ageoutcen = row_vector_d(obscomplete);
        validate_non_negative_index("dateoutcen", "obscomplete", obscomplete);
        dateoutcen = row_vector_d(obscomplete);
        validate_non_negative_index("BL_cumwlmcen", "obscomplete", obscomplete);
        BL_cumwlmcen = row_vector_d(obscomplete);
        validate_non_negative_index("BL_cumyrsexpcen", "obscomplete", obscomplete);
        BL_cumyrsexpcen = row_vector_d(obscomplete);
        validate_non_negative_index("cumyrsexpcen", "obscomplete", obscomplete);
        cumyrsexpcen = row_vector_d(obscomplete);
        validate_non_negative_index("cumyrsexp2lagcen", "obscomplete", obscomplete);
        cumyrsexp2lagcen = row_vector_d(obscomplete);
        validate_non_negative_index("cumwlm2lagcen", "obscomplete", obscomplete);
        cumwlm2lagcen = row_vector_d(obscomplete);
        validate_non_negative_index("sqrt_cumwlm2lag", "obscomplete", obscomplete);
        sqrt_cumwlm2lag = row_vector_d(obscomplete);
        validate_non_negative_index("sqrt_BL_cumwlm", "obscomplete", obscomplete);
        sqrt_BL_cumwlm = row_vector_d(obscomplete);
        validate_non_negative_index("age_fullcen", "obs", obs);
        age_fullcen = row_vector_d(obs);
        validate_non_negative_index("date_fullcen", "obs", obs);
        date_fullcen = row_vector_d(obs);
        validate_non_negative_index("BL_cumwlm_fullcen", "obs", obs);
        BL_cumwlm_fullcen = row_vector_d(obs);
        validate_non_negative_index("BL_cumyrsexp_fullcen", "obs", obs);
        BL_cumyrsexp_fullcen = row_vector_d(obs);
        meanageout = double(0);
        sdageout = double(0);
        meandateout = double(0);
        sddateout = double(0);
        meanBL_cumwlm = double(0);
        meanBL_cumyrsexp = double(0);
        meancumyrsexp = double(0);
        meancumyrsexp2lag = double(0);
        meancumwlm2lag = double(0);
        sdBL_cumwlm = double(0);
        sdBL_cumyrsexp = double(0);
        sdcumyrsexp = double(0);
        sdcumyrsexp2lag = double(0);
        sdcumwlm2lag = double(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(ageoutcen,DUMMY_VAR__);
        stan::math::fill(dateoutcen,DUMMY_VAR__);
        stan::math::fill(BL_cumwlmcen,DUMMY_VAR__);
        stan::math::fill(BL_cumyrsexpcen,DUMMY_VAR__);
        stan::math::fill(cumyrsexpcen,DUMMY_VAR__);
        stan::math::fill(cumyrsexp2lagcen,DUMMY_VAR__);
        stan::math::fill(cumwlm2lagcen,DUMMY_VAR__);
        stan::math::fill(sqrt_cumwlm2lag,DUMMY_VAR__);
        stan::math::fill(sqrt_BL_cumwlm,DUMMY_VAR__);
        stan::math::fill(age_fullcen,DUMMY_VAR__);
        stan::math::fill(date_fullcen,DUMMY_VAR__);
        stan::math::fill(BL_cumwlm_fullcen,DUMMY_VAR__);
        stan::math::fill(BL_cumyrsexp_fullcen,DUMMY_VAR__);
        stan::math::fill(meanageout,DUMMY_VAR__);
        stan::math::fill(sdageout,DUMMY_VAR__);
        stan::math::fill(meandateout,DUMMY_VAR__);
        stan::math::fill(sddateout,DUMMY_VAR__);
        stan::math::fill(meanBL_cumwlm,DUMMY_VAR__);
        stan::math::fill(meanBL_cumyrsexp,DUMMY_VAR__);
        stan::math::fill(meancumyrsexp,DUMMY_VAR__);
        stan::math::fill(meancumyrsexp2lag,DUMMY_VAR__);
        stan::math::fill(meancumwlm2lag,DUMMY_VAR__);
        stan::math::fill(sdBL_cumwlm,DUMMY_VAR__);
        stan::math::fill(sdBL_cumyrsexp,DUMMY_VAR__);
        stan::math::fill(sdcumyrsexp,DUMMY_VAR__);
        stan::math::fill(sdcumyrsexp2lag,DUMMY_VAR__);
        stan::math::fill(sdcumwlm2lag,DUMMY_VAR__);

        try {
            current_statement_begin__ = 84;
            stan::math::assign(meanageout, mean(ageout));
            current_statement_begin__ = 85;
            stan::math::assign(meandateout, mean(dateout));
            current_statement_begin__ = 86;
            stan::math::assign(meanBL_cumwlm, mean(BL_cumwlm));
            current_statement_begin__ = 87;
            stan::math::assign(meanBL_cumyrsexp, mean(BL_cumyrsexp));
            current_statement_begin__ = 88;
            stan::math::assign(meancumyrsexp, mean(cumyrsexp));
            current_statement_begin__ = 89;
            stan::math::assign(meancumyrsexp2lag, mean(cumyrsexp2lag));
            current_statement_begin__ = 90;
            stan::math::assign(meancumwlm2lag, mean(cumwlm2lag));
            current_statement_begin__ = 91;
            stan::math::assign(sdageout, sd(ageout));
            current_statement_begin__ = 92;
            stan::math::assign(sddateout, sd(dateout));
            current_statement_begin__ = 93;
            stan::math::assign(sdBL_cumwlm, sd(BL_cumwlm));
            current_statement_begin__ = 94;
            stan::math::assign(sdBL_cumyrsexp, sd(BL_cumyrsexp));
            current_statement_begin__ = 95;
            stan::math::assign(sdcumyrsexp, sd(cumyrsexp));
            current_statement_begin__ = 96;
            stan::math::assign(sdcumyrsexp2lag, sd(cumyrsexp2lag));
            current_statement_begin__ = 97;
            stan::math::assign(sdcumwlm2lag, sd(cumwlm2lag));
            current_statement_begin__ = 105;
            for (int n = 1; n <= obscomplete; ++n) {
                current_statement_begin__ = 106;
                stan::math::assign(get_base1_lhs(cumyrsexpcen,n,"cumyrsexpcen",1), ((get_base1(cumyrsexp,n,"cumyrsexp",1) - meancumyrsexp) / sdcumyrsexp));
                current_statement_begin__ = 107;
                stan::math::assign(get_base1_lhs(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1), ((get_base1(cumyrsexp2lag,n,"cumyrsexp2lag",1) - meancumyrsexp2lag) / sdcumyrsexp2lag));
                current_statement_begin__ = 108;
                stan::math::assign(get_base1_lhs(cumwlm2lagcen,n,"cumwlm2lagcen",1), ((get_base1(cumwlm2lag,n,"cumwlm2lag",1) - meancumwlm2lag) / sdcumwlm2lag));
                current_statement_begin__ = 110;
                stan::math::assign(get_base1_lhs(ageoutcen,n,"ageoutcen",1), ((get_base1(ageout,n,"ageout",1) - meanageout) / sdageout));
                current_statement_begin__ = 111;
                stan::math::assign(get_base1_lhs(dateoutcen,n,"dateoutcen",1), ((get_base1(dateout,n,"dateout",1) - meandateout) / sddateout));
                current_statement_begin__ = 112;
                stan::math::assign(get_base1_lhs(BL_cumwlmcen,n,"BL_cumwlmcen",1), ((get_base1(BL_cumwlm,n,"BL_cumwlm",1) - meanBL_cumwlm) / sdBL_cumwlm));
                current_statement_begin__ = 113;
                stan::math::assign(get_base1_lhs(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1), ((get_base1(BL_cumyrsexp,n,"BL_cumyrsexp",1) - meanBL_cumyrsexp) / sdBL_cumyrsexp));
                current_statement_begin__ = 115;
                stan::math::assign(get_base1_lhs(sqrt_cumwlm2lag,n,"sqrt_cumwlm2lag",1), sqrt(get_base1(cumwlm2lag,n,"cumwlm2lag",1)));
                current_statement_begin__ = 116;
                stan::math::assign(get_base1_lhs(sqrt_BL_cumwlm,n,"sqrt_BL_cumwlm",1), sqrt(get_base1(BL_cumwlm,n,"BL_cumwlm",1)));
            }
            current_statement_begin__ = 119;
            for (int c = 1; c <= obs; ++c) {
                current_statement_begin__ = 120;
                stan::math::assign(get_base1_lhs(age_fullcen,c,"age_fullcen",1), ((get_base1(age_full,c,"age_full",1) - meanageout) / sdageout));
                current_statement_begin__ = 121;
                stan::math::assign(get_base1_lhs(date_fullcen,c,"date_fullcen",1), ((get_base1(date_full,c,"date_full",1) - meandateout) / sddateout));
                current_statement_begin__ = 122;
                stan::math::assign(get_base1_lhs(BL_cumwlm_fullcen,c,"BL_cumwlm_fullcen",1), ((get_base1(BL_cumwlm_full,c,"BL_cumwlm_full",1) - meanBL_cumwlm) / sdBL_cumwlm));
                current_statement_begin__ = 123;
                stan::math::assign(get_base1_lhs(BL_cumyrsexp_fullcen,c,"BL_cumyrsexp_fullcen",1), ((get_base1(BL_cumyrsexp_full,c,"BL_cumyrsexp_full",1) - meanBL_cumyrsexp) / sdBL_cumyrsexp));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += 17;
        num_params_r__ += 16;
        num_params_r__ += 13;
        num_params_r__ += 15;
    }

    ~cpum_bayesgf_20151029_time_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("a0")))
            throw std::runtime_error("variable a0 missing");
        vals_r__ = context__.vals_r("a0");
        pos__ = 0U;
        context__.validate_dims("initialization", "a0", "double", context__.to_vec());
        double a0(0);
        a0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(a0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a0: ") + e.what());
        }

        if (!(context__.contains_r("b0")))
            throw std::runtime_error("variable b0 missing");
        vals_r__ = context__.vals_r("b0");
        pos__ = 0U;
        context__.validate_dims("initialization", "b0", "double", context__.to_vec());
        double b0(0);
        b0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b0: ") + e.what());
        }

        if (!(context__.contains_r("c0")))
            throw std::runtime_error("variable c0 missing");
        vals_r__ = context__.vals_r("c0");
        pos__ = 0U;
        context__.validate_dims("initialization", "c0", "double", context__.to_vec());
        double c0(0);
        c0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(c0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c0: ") + e.what());
        }

        if (!(context__.contains_r("g0")))
            throw std::runtime_error("variable g0 missing");
        vals_r__ = context__.vals_r("g0");
        pos__ = 0U;
        context__.validate_dims("initialization", "g0", "double", context__.to_vec());
        double g0(0);
        g0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(g0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable g0: ") + e.what());
        }

        if (!(context__.contains_r("sigma2")))
            throw std::runtime_error("variable sigma2 missing");
        vals_r__ = context__.vals_r("sigma2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma2", "double", context__.to_vec());
        double sigma2(0);
        sigma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma2: ") + e.what());
        }

        if (!(context__.contains_r("a")))
            throw std::runtime_error("variable a missing");
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        context__.validate_dims("initialization", "a", "double", context__.to_vec(17));
        std::vector<double> a(17,double(0));
        for (int i0__ = 0U; i0__ < 17; ++i0__)
            a[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 17; ++i0__)
            try {
            writer__.scalar_unconstrain(a[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a: ") + e.what());
        }

        if (!(context__.contains_r("g")))
            throw std::runtime_error("variable g missing");
        vals_r__ = context__.vals_r("g");
        pos__ = 0U;
        context__.validate_dims("initialization", "g", "double", context__.to_vec(16));
        std::vector<double> g(16,double(0));
        for (int i0__ = 0U; i0__ < 16; ++i0__)
            g[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 16; ++i0__)
            try {
            writer__.scalar_unconstrain(g[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable g: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec(13));
        std::vector<double> b(13,double(0));
        for (int i0__ = 0U; i0__ < 13; ++i0__)
            b[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 13; ++i0__)
            try {
            writer__.scalar_unconstrain(b[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("c")))
            throw std::runtime_error("variable c missing");
        vals_r__ = context__.vals_r("c");
        pos__ = 0U;
        context__.validate_dims("initialization", "c", "double", context__.to_vec(15));
        std::vector<double> c(15,double(0));
        for (int i0__ = 0U; i0__ < 15; ++i0__)
            c[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 15; ++i0__)
            try {
            writer__.scalar_unconstrain(c[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable c: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ a0;
        (void) a0;   // dummy to suppress unused var warning
        if (jacobian__)
            a0 = in__.scalar_constrain(lp__);
        else
            a0 = in__.scalar_constrain();

        T__ b0;
        (void) b0;   // dummy to suppress unused var warning
        if (jacobian__)
            b0 = in__.scalar_constrain(lp__);
        else
            b0 = in__.scalar_constrain();

        T__ c0;
        (void) c0;   // dummy to suppress unused var warning
        if (jacobian__)
            c0 = in__.scalar_constrain(lp__);
        else
            c0 = in__.scalar_constrain();

        T__ g0;
        (void) g0;   // dummy to suppress unused var warning
        if (jacobian__)
            g0 = in__.scalar_constrain(lp__);
        else
            g0 = in__.scalar_constrain();

        T__ sigma2;
        (void) sigma2;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma2 = in__.scalar_lb_constrain(0,lp__);
        else
            sigma2 = in__.scalar_lb_constrain(0);

        vector<T__> a;
        size_t dim_a_0__ = 17;
        a.reserve(dim_a_0__);
        for (size_t k_0__ = 0; k_0__ < dim_a_0__; ++k_0__) {
            if (jacobian__)
                a.push_back(in__.scalar_constrain(lp__));
            else
                a.push_back(in__.scalar_constrain());
        }

        vector<T__> g;
        size_t dim_g_0__ = 16;
        g.reserve(dim_g_0__);
        for (size_t k_0__ = 0; k_0__ < dim_g_0__; ++k_0__) {
            if (jacobian__)
                g.push_back(in__.scalar_constrain(lp__));
            else
                g.push_back(in__.scalar_constrain());
        }

        vector<T__> b;
        size_t dim_b_0__ = 13;
        b.reserve(dim_b_0__);
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            if (jacobian__)
                b.push_back(in__.scalar_constrain(lp__));
            else
                b.push_back(in__.scalar_constrain());
        }

        vector<T__> c;
        size_t dim_c_0__ = 15;
        c.reserve(dim_c_0__);
        for (size_t k_0__ = 0; k_0__ < dim_c_0__; ++k_0__) {
            if (jacobian__)
                c.push_back(in__.scalar_constrain(lp__));
            else
                c.push_back(in__.scalar_constrain());
        }


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 148;
            lp_accum__.add(normal_log<propto__>(a, 0, 5));
            current_statement_begin__ = 149;
            lp_accum__.add(normal_log<propto__>(b, 0, 5));
            current_statement_begin__ = 150;
            lp_accum__.add(normal_log<propto__>(c, 0, 5));
            current_statement_begin__ = 151;
            lp_accum__.add(normal_log<propto__>(g, 0, 5));
            current_statement_begin__ = 152;
            lp_accum__.add(inv_gamma_log<propto__>(sigma2, 0.10000000000000001, 0.10000000000000001));
            current_statement_begin__ = 153;
            for (int n = 1; n <= obscomplete; ++n) {
                current_statement_begin__ = 159;
                if (as_bool((primitive_value((primitive_value(logical_eq(get_base1(atwork,n,"atwork",1),1)) || primitive_value(logical_eq(get_base1(leftwork,n,"leftwork",1),1)))) && primitive_value(logical_lt(get_base1(dateout,n,"dateout",1),1977.5))))) {
                    current_statement_begin__ = 160;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(leftwork,n,"leftwork",1), ((((((((((((((((g0 + (get_base1(g,1,"g",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + ((get_base1(g,2,"g",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + (((get_base1(g,3,"g",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + (get_base1(g,4,"g",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + ((get_base1(g,5,"g",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + (((get_base1(g,6,"g",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + (get_base1(g,7,"g",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + ((get_base1(g,8,"g",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + (((get_base1(g,9,"g",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + (get_base1(g,10,"g",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + ((get_base1(g,11,"g",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + (((get_base1(g,12,"g",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + (get_base1(g,13,"g",1) * get_base1(ageoutcen,n,"ageoutcen",1))) + ((get_base1(g,14,"g",1) * get_base1(ageoutcen,n,"ageoutcen",1)) * get_base1(ageoutcen,n,"ageoutcen",1))) + (get_base1(g,15,"g",1) * get_base1(dateoutcen,n,"dateoutcen",1))) + ((get_base1(g,16,"g",1) * get_base1(dateoutcen,n,"dateoutcen",1)) * get_base1(dateoutcen,n,"dateoutcen",1)))));
                } else {
                    current_statement_begin__ = 179;
                    lp_accum__.add(0);
                }
                current_statement_begin__ = 184;
                if (as_bool((primitive_value(logical_eq(get_base1(atwork,n,"atwork",1),1)) && primitive_value(logical_gt(get_base1(wlm,n,"wlm",1),0))))) {
                    current_statement_begin__ = 185;
                    lp_accum__.add(normal_log<propto__>(log((get_base1(wlm,n,"wlm",1) / 1000)), (((((((((((((((((a0 + (get_base1(a,1,"a",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + ((get_base1(a,2,"a",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + (((get_base1(a,3,"a",1) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1)) * get_base1(BL_cumwlmcen,n,"BL_cumwlmcen",1))) + (get_base1(a,4,"a",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + ((get_base1(a,5,"a",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + (((get_base1(a,6,"a",1) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1)) * get_base1(BL_cumyrsexpcen,n,"BL_cumyrsexpcen",1))) + (get_base1(a,7,"a",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + ((get_base1(a,8,"a",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + (((get_base1(a,9,"a",1) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1)) * get_base1(cumyrsexp2lagcen,n,"cumyrsexp2lagcen",1))) + (get_base1(a,10,"a",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + ((get_base1(a,11,"a",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + (((get_base1(a,12,"a",1) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1)) * get_base1(cumwlm2lagcen,n,"cumwlm2lagcen",1))) + (get_base1(a,13,"a",1) * get_base1(ageoutcen,n,"ageoutcen",1))) + ((get_base1(a,14,"a",1) * get_base1(ageoutcen,n,"ageoutcen",1)) * get_base1(ageoutcen,n,"ageoutcen",1))) + (get_base1(a,15,"a",1) * get_base1(dateoutcen,n,"dateoutcen",1))) + ((get_base1(a,16,"a",1) * get_base1(dateoutcen,n,"dateoutcen",1)) * get_base1(dateoutcen,n,"dateoutcen",1))) + (((get_base1(a,17,"a",1) * get_base1(dateoutcen,n,"dateoutcen",1)) * get_base1(dateoutcen,n,"dateoutcen",1)) * get_base1(dateoutcen,n,"dateoutcen",1))), sigma2));
                } else {
                    current_statement_begin__ = 206;
                    lp_accum__.add(0);
                }
            }
            current_statement_begin__ = 215;
            lp_accum__.add(bernoulli_logit_log<propto__>(d_lc, add(add(add(add(add(add(add(add(add(add(add(add(b0,multiply(get_base1(b,1,"b",1),BL_cumwlmcen)),multiply(get_base1(b,2,"b",1),BL_cumyrsexpcen)),multiply(get_base1(b,3,"b",1),cumyrsexpcen)),elt_multiply(multiply(get_base1(b,4,"b",1),cumyrsexpcen),cumyrsexpcen)),elt_multiply(multiply(get_base1(b,5,"b",1),cumyrsexpcen),cumwlm2lagcen)),multiply(get_base1(b,6,"b",1),cumwlm2lagcen)),elt_multiply(multiply(get_base1(b,7,"b",1),cumwlm2lagcen),cumwlm2lagcen)),multiply(get_base1(b,8,"b",1),ageoutcen)),elt_multiply(multiply(get_base1(b,9,"b",1),ageoutcen),ageoutcen)),elt_multiply(elt_multiply(multiply(get_base1(b,10,"b",1),ageoutcen),ageoutcen),ageoutcen)),multiply(get_base1(b,11,"b",1),dateoutcen)),elt_multiply(multiply(get_base1(b,12,"b",1),dateoutcen),dateoutcen))));
            current_statement_begin__ = 233;
            lp_accum__.add(bernoulli_logit_log<propto__>(d_nonlc, add(add(add(add(add(add(add(c0,multiply(get_base1(c,1,"c",1),BL_cumwlmcen)),multiply(get_base1(c,3,"c",1),BL_cumyrsexpcen)),multiply(get_base1(c,8,"c",1),cumwlm2lagcen)),multiply(get_base1(c,10,"c",1),ageoutcen)),elt_multiply(multiply(get_base1(c,11,"c",1),ageoutcen),ageoutcen)),multiply(get_base1(c,14,"c",1),dateoutcen)),elt_multiply(multiply(get_base1(c,15,"c",1),dateoutcen),dateoutcen))));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a0");
        names__.push_back("b0");
        names__.push_back("c0");
        names__.push_back("g0");
        names__.push_back("sigma2");
        names__.push_back("a");
        names__.push_back("g");
        names__.push_back("b");
        names__.push_back("c");
        names__.push_back("surv_nc");
        names__.push_back("cinlc_nc");
        names__.push_back("cilc_nc");
        names__.push_back("meanCumX");
        names__.push_back("meanWkyrs");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(17);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(16);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(13);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(15);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "cpum_bayesgf_20151029_time_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double a0 = in__.scalar_constrain();
        double b0 = in__.scalar_constrain();
        double c0 = in__.scalar_constrain();
        double g0 = in__.scalar_constrain();
        double sigma2 = in__.scalar_lb_constrain(0);
        vector<double> a;
        size_t dim_a_0__ = 17;
        for (size_t k_0__ = 0; k_0__ < dim_a_0__; ++k_0__) {
            a.push_back(in__.scalar_constrain());
        }
        vector<double> g;
        size_t dim_g_0__ = 16;
        for (size_t k_0__ = 0; k_0__ < dim_g_0__; ++k_0__) {
            g.push_back(in__.scalar_constrain());
        }
        vector<double> b;
        size_t dim_b_0__ = 13;
        for (size_t k_0__ = 0; k_0__ < dim_b_0__; ++k_0__) {
            b.push_back(in__.scalar_constrain());
        }
        vector<double> c;
        size_t dim_c_0__ = 15;
        for (size_t k_0__ = 0; k_0__ < dim_c_0__; ++k_0__) {
            c.push_back(in__.scalar_constrain());
        }
        vars__.push_back(a0);
        vars__.push_back(b0);
        vars__.push_back(c0);
        vars__.push_back(g0);
        vars__.push_back(sigma2);
        for (int k_0__ = 0; k_0__ < 17; ++k_0__) {
            vars__.push_back(a[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 16; ++k_0__) {
            vars__.push_back(g[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 13; ++k_0__) {
            vars__.push_back(b[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 15; ++k_0__) {
            vars__.push_back(c[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> surv_nc(J, 0.0);
        vector<double> cinlc_nc(J, 0.0);
        vector<double> cilc_nc(J, 0.0);
        vector<double> meanCumX(4, 0.0);
        vector<double> meanWkyrs(4, 0.0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(surv_nc,DUMMY_VAR__);
        stan::math::fill(cinlc_nc,DUMMY_VAR__);
        stan::math::fill(cilc_nc,DUMMY_VAR__);
        stan::math::fill(meanCumX,DUMMY_VAR__);
        stan::math::fill(meanWkyrs,DUMMY_VAR__);

        try {
            {
                vector<int> R(J, 0);
                vector<double> meanX(J, 0.0);
                vector<double> surv_2(J, 0.0);
                vector<double> cilc_2(J, 0.0);
                vector<double> cinlc_2(J, 0.0);
                vector<double> surv_1(J, 0.0);
                vector<double> cilc_1(J, 0.0);
                vector<double> cinlc_1(J, 0.0);
                vector<double> surv_33(J, 0.0);
                vector<double> cilc_33(J, 0.0);
                vector<double> cinlc_33(J, 0.0);
                vector<double> y_ac(J, 0.0);
                vector<double> ylc(J, 0.0);
                vector<double> ynlc(J, 0.0);
                vector<double> xhat(obs, 0.0);
                vector<double> lhat(obs, 0.0);
                vector<double> h_lcn(obs, 0.0);
                vector<double> h_nlcn(obs, 0.0);
                vector<double> cumx(obs, 0.0);
                vector<double> cuml(obs, 0.0);
                vector<double> cumlcen(obs, 0.0);
                vector<double> cumx2lag(obs, 0.0);
                vector<double> cumx2lagcen(obs, 0.0);
                vector<double> cuml2lag(obs, 0.0);
                vector<double> cuml2lagcen(obs, 0.0);
                vector<double> cumx5lag(obs, 0.0);
                vector<double> lhat5lag(obs, 0.0);
                vector<double> lhat2lag(obs, 0.0);
                double rep(0.0);
                (void) rep;  // dummy to suppress unused var warning
                stan::math::initialize(meanX, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(surv_2, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cilc_2, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cinlc_2, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(surv_1, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cilc_1, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cinlc_1, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(surv_33, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cilc_33, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cinlc_33, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(y_ac, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(ylc, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(ynlc, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(xhat, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(lhat, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(h_lcn, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(h_nlcn, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cumx, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cuml, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cumlcen, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cumx2lag, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cumx2lagcen, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cuml2lag, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cuml2lagcen, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(cumx5lag, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(lhat5lag, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(lhat2lag, std::numeric_limits<double>::quiet_NaN());
                stan::math::initialize(rep, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 329;
                for (int interv = 1; interv <= 4; ++interv) {
                    current_statement_begin__ = 335;
                    stan::math::assign(get_base1_lhs(meanCumX,interv,"meanCumX",1), 0);
                    current_statement_begin__ = 336;
                    stan::math::assign(get_base1_lhs(meanWkyrs,interv,"meanWkyrs",1), 0);
                    current_statement_begin__ = 339;
                    for (int n = 1; n <= obs; ++n) {
                        current_statement_begin__ = 340;
                        stan::math::assign(get_base1_lhs(cumx,n,"cumx",1), 0);
                        current_statement_begin__ = 341;
                        stan::math::assign(get_base1_lhs(cuml,n,"cuml",1), 0);
                        current_statement_begin__ = 342;
                        stan::math::assign(get_base1_lhs(cumlcen,n,"cumlcen",1), ((get_base1(cuml,n,"cuml",1) - meancumyrsexp) / sdcumyrsexp));
                        current_statement_begin__ = 343;
                        stan::math::assign(get_base1_lhs(lhat,n,"lhat",1), 0);
                        current_statement_begin__ = 344;
                        stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 0);
                    }
                    current_statement_begin__ = 347;
                    for (int k = 1; k <= J; ++k) {
                        current_statement_begin__ = 348;
                        stan::math::assign(get_base1_lhs(R,k,"R",1), 0);
                        current_statement_begin__ = 349;
                        stan::math::assign(get_base1_lhs(ylc,k,"ylc",1), 0);
                        current_statement_begin__ = 350;
                        stan::math::assign(get_base1_lhs(ynlc,k,"ynlc",1), 0);
                        current_statement_begin__ = 351;
                        stan::math::assign(get_base1_lhs(meanX,k,"meanX",1), 0);
                    }
                    current_statement_begin__ = 357;
                    for (int n = 1; n <= obs; ++n) {
                        current_statement_begin__ = 360;
                        if (as_bool((primitive_value(logical_gt(n,5)) && primitive_value(logical_eq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 5),"id_full",1)))))) {
                            current_statement_begin__ = 361;
                            stan::math::assign(get_base1_lhs(cumx5lag,n,"cumx5lag",1), get_base1(cumx,(n - 5),"cumx",1));
                            current_statement_begin__ = 362;
                            stan::math::assign(get_base1_lhs(lhat5lag,n,"lhat5lag",1), get_base1(lhat,(n - 5),"lhat",1));
                        } else {
                            current_statement_begin__ = 365;
                            stan::math::assign(get_base1_lhs(cumx5lag,n,"cumx5lag",1), 0);
                            current_statement_begin__ = 366;
                            stan::math::assign(get_base1_lhs(lhat5lag,n,"lhat5lag",1), 0);
                        }
                        current_statement_begin__ = 368;
                        if (as_bool((primitive_value(logical_gt(n,2)) && primitive_value(logical_eq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 2),"id_full",1)))))) {
                            current_statement_begin__ = 369;
                            stan::math::assign(get_base1_lhs(lhat2lag,n,"lhat2lag",1), get_base1(lhat,(n - 2),"lhat",1));
                            current_statement_begin__ = 370;
                            stan::math::assign(get_base1_lhs(cumx2lag,n,"cumx2lag",1), get_base1(cumx,(n - 2),"cumx",1));
                            current_statement_begin__ = 371;
                            stan::math::assign(get_base1_lhs(cumx2lagcen,n,"cumx2lagcen",1), ((get_base1(cumx2lag,n,"cumx2lag",1) - meancumwlm2lag) / sdcumwlm2lag));
                            current_statement_begin__ = 372;
                            stan::math::assign(get_base1_lhs(cuml2lag,n,"cuml2lag",1), get_base1(cuml,(n - 2),"cuml",1));
                            current_statement_begin__ = 373;
                            stan::math::assign(get_base1_lhs(cuml2lagcen,n,"cuml2lagcen",1), ((get_base1(cuml2lag,n,"cuml2lag",1) - meancumyrsexp2lag) / sdcumyrsexp2lag));
                        } else {
                            current_statement_begin__ = 376;
                            stan::math::assign(get_base1_lhs(lhat2lag,n,"lhat2lag",1), 0);
                            current_statement_begin__ = 377;
                            stan::math::assign(get_base1_lhs(cumx2lag,n,"cumx2lag",1), 0);
                            current_statement_begin__ = 378;
                            stan::math::assign(get_base1_lhs(cumx2lagcen,n,"cumx2lagcen",1), ((get_base1(cumx2lag,n,"cumx2lag",1) - meancumwlm2lag) / sdcumwlm2lag));
                            current_statement_begin__ = 379;
                            stan::math::assign(get_base1_lhs(cuml2lag,n,"cuml2lag",1), 0);
                            current_statement_begin__ = 380;
                            stan::math::assign(get_base1_lhs(cuml2lagcen,n,"cuml2lagcen",1), ((get_base1(cuml2lag,n,"cuml2lag",1) - meancumyrsexp2lag) / sdcumyrsexp2lag));
                        }
                        current_statement_begin__ = 387;
                        if (as_bool((primitive_value(logical_eq(n,1)) || primitive_value(logical_neq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1)))))) {
                            current_statement_begin__ = 387;
                            stan::math::assign(get_base1_lhs(lhat,n,"lhat",1), 1);
                        } else if (as_bool((primitive_value((primitive_value((primitive_value(logical_gt(n,1)) && primitive_value(logical_eq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1))))) && primitive_value(logical_eq(get_base1(lhat,(n - 1),"lhat",1),1)))) && primitive_value(logical_lt(get_base1(date_full,n,"date_full",1),1978))))) {
                            current_statement_begin__ = 390;
                            stan::math::assign(get_base1_lhs(lhat,n,"lhat",1), (1 - bernoulli_rng(inv_logit(((((((((((((((((g0 + (get_base1(g,1,"g",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + ((get_base1(g,2,"g",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (((get_base1(g,3,"g",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (get_base1(g,4,"g",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + ((get_base1(g,5,"g",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (((get_base1(g,6,"g",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (get_base1(g,7,"g",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + ((get_base1(g,8,"g",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + (((get_base1(g,9,"g",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + (get_base1(g,10,"g",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + ((get_base1(g,11,"g",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (((get_base1(g,12,"g",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (get_base1(g,13,"g",1) * get_base1(age_fullcen,n,"age_fullcen",1))) + ((get_base1(g,14,"g",1) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1))) + (get_base1(g,15,"g",1) * get_base1(date_fullcen,n,"date_fullcen",1))) + ((get_base1(g,16,"g",1) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1)))), base_rng__)));
                        } else {
                            current_statement_begin__ = 410;
                            stan::math::assign(get_base1_lhs(lhat,n,"lhat",1), 0);
                        }
                        current_statement_begin__ = 413;
                        if (as_bool((primitive_value(logical_eq(n,1)) || primitive_value(logical_neq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1)))))) {
                            current_statement_begin__ = 414;
                            stan::math::assign(get_base1_lhs(cuml,n,"cuml",1), get_base1(lhat,n,"lhat",1));
                            current_statement_begin__ = 415;
                            stan::math::assign(get_base1_lhs(cumlcen,n,"cumlcen",1), ((get_base1(cuml,n,"cuml",1) - meancumyrsexp) / sdcumyrsexp));
                        } else if (as_bool((primitive_value(logical_gt(n,1)) && primitive_value(logical_eq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1)))))) {
                            current_statement_begin__ = 418;
                            stan::math::assign(get_base1_lhs(cuml,n,"cuml",1), (get_base1(cuml,(n - 1),"cuml",1) + get_base1(lhat,n,"lhat",1)));
                            current_statement_begin__ = 419;
                            stan::math::assign(get_base1_lhs(cumlcen,n,"cumlcen",1), ((get_base1(cuml,n,"cuml",1) - meancumyrsexp) / sdcumyrsexp));
                        }
                        current_statement_begin__ = 424;
                        if (as_bool(logical_eq(get_base1(lhat,n,"lhat",1),1))) {
                            current_statement_begin__ = 425;
                            stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 4500);
                            current_statement_begin__ = 426;
                            stan::math::assign(rep, 0);
                            current_statement_begin__ = 427;
                            while (as_bool(logical_gt(get_base1(xhat,n,"xhat",1),4000))) {
                                current_statement_begin__ = 428;
                                stan::math::assign(rep, (rep + 1));
                                current_statement_begin__ = 429;
                                stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), (1000 * exp(normal_rng((((((((((((((((((a0 + (get_base1(a,1,"a",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + ((get_base1(a,2,"a",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (((get_base1(a,3,"a",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1)) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (get_base1(a,4,"a",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + ((get_base1(a,5,"a",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (((get_base1(a,6,"a",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1)) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (get_base1(a,7,"a",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + ((get_base1(a,8,"a",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + (((get_base1(a,9,"a",1) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1)) * get_base1(cuml2lagcen,n,"cuml2lagcen",1))) + (get_base1(a,10,"a",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + ((get_base1(a,11,"a",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (((get_base1(a,12,"a",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (get_base1(a,13,"a",1) * get_base1(age_fullcen,n,"age_fullcen",1))) + ((get_base1(a,14,"a",1) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1))) + (get_base1(a,15,"a",1) * get_base1(date_fullcen,n,"date_fullcen",1))) + ((get_base1(a,16,"a",1) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1))) + (((get_base1(a,17,"a",1) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1))),sigma2, base_rng__))));
                                current_statement_begin__ = 450;
                                if (as_bool(logical_gt(rep,10))) {
                                    current_statement_begin__ = 452;
                                    if (pstream__) {
                                        stan_print(pstream__,"exposure model wacky");
                                        *pstream__ << std::endl;
                                    }
                                    current_statement_begin__ = 452;
                                    current_statement_begin__ = 453;
                                    stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 4000);
                                }
                            }
                        } else if (as_bool(logical_eq(get_base1(lhat,n,"lhat",1),0))) {
                            current_statement_begin__ = 458;
                            stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 0);
                        }
                        current_statement_begin__ = 461;
                        if (as_bool((primitive_value(logical_eq(interv,1)) && primitive_value(logical_gt(get_base1(xhat,n,"xhat",1),24))))) {
                            current_statement_begin__ = 462;
                            stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 24);
                        }
                        current_statement_begin__ = 464;
                        if (as_bool((primitive_value(logical_eq(interv,2)) && primitive_value(logical_gt(get_base1(xhat,n,"xhat",1),12))))) {
                            current_statement_begin__ = 465;
                            stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 12);
                        }
                        current_statement_begin__ = 467;
                        if (as_bool((primitive_value(logical_eq(interv,3)) && primitive_value(logical_gt(get_base1(xhat,n,"xhat",1),4))))) {
                            current_statement_begin__ = 468;
                            stan::math::assign(get_base1_lhs(xhat,n,"xhat",1), 4);
                        }
                        current_statement_begin__ = 472;
                        if (as_bool((primitive_value(logical_eq(n,1)) || primitive_value(logical_neq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1)))))) {
                            current_statement_begin__ = 473;
                            stan::math::assign(get_base1_lhs(cumx,n,"cumx",1), get_base1(xhat,n,"xhat",1));
                        }
                        current_statement_begin__ = 475;
                        if (as_bool((primitive_value(logical_gt(n,1)) && primitive_value(logical_eq(get_base1(id_full,n,"id_full",1),get_base1(id_full,(n - 1),"id_full",1)))))) {
                            current_statement_begin__ = 476;
                            stan::math::assign(get_base1_lhs(cumx,n,"cumx",1), (get_base1(cumx,(n - 1),"cumx",1) + get_base1(xhat,n,"xhat",1)));
                        }
                        current_statement_begin__ = 482;
                        stan::math::assign(get_base1_lhs(h_lcn,n,"h_lcn",1), inv_logit(((((((((((((b0 + (get_base1(b,1,"b",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (get_base1(b,2,"b",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (get_base1(b,3,"b",1) * get_base1(cumlcen,n,"cumlcen",1))) + ((get_base1(b,4,"b",1) * get_base1(cumlcen,n,"cumlcen",1)) * get_base1(cumlcen,n,"cumlcen",1))) + (get_base1(b,5,"b",1) * get_base1(lhat2lag,n,"lhat2lag",1))) + (get_base1(b,6,"b",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + ((get_base1(b,7,"b",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1)) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (get_base1(b,8,"b",1) * get_base1(age_fullcen,n,"age_fullcen",1))) + ((get_base1(b,9,"b",1) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1))) + (((get_base1(b,10,"b",1) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1))) + (get_base1(b,11,"b",1) * get_base1(date_fullcen,n,"date_fullcen",1))) + ((get_base1(b,12,"b",1) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1)))));
                        current_statement_begin__ = 500;
                        stan::math::assign(get_base1_lhs(h_nlcn,n,"h_nlcn",1), inv_logit((((((((c0 + (get_base1(c,1,"c",1) * get_base1(BL_cumwlm_fullcen,n,"BL_cumwlm_fullcen",1))) + (get_base1(c,3,"c",1) * get_base1(BL_cumyrsexp_fullcen,n,"BL_cumyrsexp_fullcen",1))) + (get_base1(c,8,"c",1) * get_base1(cumx2lagcen,n,"cumx2lagcen",1))) + (get_base1(c,10,"c",1) * get_base1(age_fullcen,n,"age_fullcen",1))) + ((get_base1(c,11,"c",1) * get_base1(age_fullcen,n,"age_fullcen",1)) * get_base1(age_fullcen,n,"age_fullcen",1))) + (get_base1(c,14,"c",1) * get_base1(date_fullcen,n,"date_fullcen",1))) + ((get_base1(c,15,"c",1) * get_base1(date_fullcen,n,"date_fullcen",1)) * get_base1(date_fullcen,n,"date_fullcen",1)))));
                        current_statement_begin__ = 520;
                        for (int k = 1; k <= J; ++k) {
                            current_statement_begin__ = 522;
                            if (as_bool(logical_eq(get_base1(age_full,n,"age_full",1),((k + minT) - 1)))) {
                                current_statement_begin__ = 524;
                                stan::math::assign(get_base1_lhs(R,k,"R",1), (get_base1(R,k,"R",1) + 1));
                                current_statement_begin__ = 526;
                                stan::math::assign(get_base1_lhs(ylc,k,"ylc",1), (get_base1(ylc,k,"ylc",1) + get_base1(h_lcn,n,"h_lcn",1)));
                                current_statement_begin__ = 527;
                                stan::math::assign(get_base1_lhs(ynlc,k,"ynlc",1), (get_base1(ynlc,k,"ynlc",1) + get_base1(h_nlcn,n,"h_nlcn",1)));
                                current_statement_begin__ = 528;
                                stan::math::assign(get_base1_lhs(meanX,k,"meanX",1), (get_base1(meanX,k,"meanX",1) + get_base1(xhat,n,"xhat",1)));
                            }
                        }
                        current_statement_begin__ = 531;
                        if (as_bool((primitive_value(logical_eq(get_base1(age_full,n,"age_full",1),maxT)) || primitive_value(logical_eq(get_base1(age_full,n,"age_full",1),get_base1(maxage_full,n,"maxage_full",1)))))) {
                            current_statement_begin__ = 532;
                            stan::math::assign(get_base1_lhs(meanCumX,interv,"meanCumX",1), (get_base1(meanCumX,interv,"meanCumX",1) + (get_base1(cumx,n,"cumx",1) / N)));
                            current_statement_begin__ = 533;
                            stan::math::assign(get_base1_lhs(meanWkyrs,interv,"meanWkyrs",1), (get_base1(meanWkyrs,interv,"meanWkyrs",1) + (get_base1(cuml,n,"cuml",1) / N)));
                        }
                    }
                    current_statement_begin__ = 537;
                    for (int k = 1; k <= J; ++k) {
                        current_statement_begin__ = 539;
                        stan::math::assign(get_base1_lhs(ylc,k,"ylc",1), (get_base1(ylc,k,"ylc",1) / get_base1(R,k,"R",1)));
                        current_statement_begin__ = 540;
                        stan::math::assign(get_base1_lhs(ynlc,k,"ynlc",1), (get_base1(ynlc,k,"ynlc",1) / get_base1(R,k,"R",1)));
                        current_statement_begin__ = 541;
                        stan::math::assign(get_base1_lhs(meanX,k,"meanX",1), (get_base1(meanX,k,"meanX",1) / get_base1(R,k,"R",1)));
                        current_statement_begin__ = 542;
                        stan::math::assign(get_base1_lhs(y_ac,k,"y_ac",1), (get_base1(ylc,k,"ylc",1) + get_base1(ynlc,k,"ynlc",1)));
                    }
                    current_statement_begin__ = 548;
                    if (as_bool(logical_eq(interv,1))) {
                        current_statement_begin__ = 550;
                        stan::math::assign(get_base1_lhs(surv_2,1,"surv_2",1), (1 - (get_base1(ylc,1,"ylc",1) + get_base1(ynlc,1,"ynlc",1))));
                        current_statement_begin__ = 551;
                        stan::math::assign(get_base1_lhs(cilc_2,1,"cilc_2",1), get_base1(ylc,1,"ylc",1));
                        current_statement_begin__ = 552;
                        stan::math::assign(get_base1_lhs(cinlc_2,1,"cinlc_2",1), get_base1(ynlc,1,"ynlc",1));
                        current_statement_begin__ = 553;
                        for (int k = 2; k <= J; ++k) {
                            current_statement_begin__ = 554;
                            stan::math::assign(get_base1_lhs(surv_2,k,"surv_2",1), ((1 - (get_base1(ylc,k,"ylc",1) + get_base1(ynlc,k,"ynlc",1))) * get_base1(surv_2,(k - 1),"surv_2",1)));
                            current_statement_begin__ = 555;
                            stan::math::assign(get_base1_lhs(cilc_2,k,"cilc_2",1), (get_base1(cilc_2,(k - 1),"cilc_2",1) + (get_base1(ylc,k,"ylc",1) * get_base1(surv_2,(k - 1),"surv_2",1))));
                            current_statement_begin__ = 556;
                            stan::math::assign(get_base1_lhs(cinlc_2,k,"cinlc_2",1), (get_base1(cinlc_2,(k - 1),"cinlc_2",1) + (get_base1(ynlc,k,"ynlc",1) * get_base1(surv_2,(k - 1),"surv_2",1))));
                        }
                    }
                    current_statement_begin__ = 560;
                    if (as_bool(logical_eq(interv,2))) {
                        current_statement_begin__ = 562;
                        stan::math::assign(get_base1_lhs(surv_1,1,"surv_1",1), (1 - (get_base1(ylc,1,"ylc",1) + get_base1(ynlc,1,"ynlc",1))));
                        current_statement_begin__ = 563;
                        stan::math::assign(get_base1_lhs(cilc_1,1,"cilc_1",1), get_base1(ylc,1,"ylc",1));
                        current_statement_begin__ = 564;
                        stan::math::assign(get_base1_lhs(cinlc_1,1,"cinlc_1",1), get_base1(ynlc,1,"ynlc",1));
                        current_statement_begin__ = 565;
                        for (int k = 2; k <= J; ++k) {
                            current_statement_begin__ = 566;
                            stan::math::assign(get_base1_lhs(surv_1,k,"surv_1",1), ((1 - (get_base1(ylc,k,"ylc",1) + get_base1(ynlc,k,"ynlc",1))) * get_base1(surv_1,(k - 1),"surv_1",1)));
                            current_statement_begin__ = 567;
                            stan::math::assign(get_base1_lhs(cilc_1,k,"cilc_1",1), (get_base1(cilc_1,(k - 1),"cilc_1",1) + (get_base1(ylc,k,"ylc",1) * get_base1(surv_1,(k - 1),"surv_1",1))));
                            current_statement_begin__ = 568;
                            stan::math::assign(get_base1_lhs(cinlc_1,k,"cinlc_1",1), (get_base1(cinlc_1,(k - 1),"cinlc_1",1) + (get_base1(ynlc,k,"ynlc",1) * get_base1(surv_1,(k - 1),"surv_1",1))));
                        }
                    }
                    current_statement_begin__ = 571;
                    if (as_bool(logical_eq(interv,3))) {
                        current_statement_begin__ = 573;
                        stan::math::assign(get_base1_lhs(surv_33,1,"surv_33",1), (1 - (get_base1(ylc,1,"ylc",1) + get_base1(ynlc,1,"ynlc",1))));
                        current_statement_begin__ = 574;
                        stan::math::assign(get_base1_lhs(cilc_33,1,"cilc_33",1), get_base1(ylc,1,"ylc",1));
                        current_statement_begin__ = 575;
                        stan::math::assign(get_base1_lhs(cinlc_33,1,"cinlc_33",1), get_base1(ynlc,1,"ynlc",1));
                        current_statement_begin__ = 576;
                        for (int k = 2; k <= J; ++k) {
                            current_statement_begin__ = 577;
                            stan::math::assign(get_base1_lhs(surv_33,k,"surv_33",1), ((1 - (get_base1(ylc,k,"ylc",1) + get_base1(ynlc,k,"ynlc",1))) * get_base1(surv_33,(k - 1),"surv_33",1)));
                            current_statement_begin__ = 578;
                            stan::math::assign(get_base1_lhs(cilc_33,k,"cilc_33",1), (get_base1(cilc_1,(k - 1),"cilc_1",1) + (get_base1(ylc,k,"ylc",1) * get_base1(surv_33,(k - 1),"surv_33",1))));
                            current_statement_begin__ = 579;
                            stan::math::assign(get_base1_lhs(cinlc_33,k,"cinlc_33",1), (get_base1(cinlc_1,(k - 1),"cinlc_1",1) + (get_base1(ynlc,k,"ynlc",1) * get_base1(surv_33,(k - 1),"surv_33",1))));
                        }
                    }
                    current_statement_begin__ = 582;
                    if (as_bool(logical_eq(interv,4))) {
                        current_statement_begin__ = 584;
                        stan::math::assign(get_base1_lhs(surv_nc,1,"surv_nc",1), (1 - (get_base1(ylc,1,"ylc",1) + get_base1(ynlc,1,"ynlc",1))));
                        current_statement_begin__ = 585;
                        stan::math::assign(get_base1_lhs(cilc_nc,1,"cilc_nc",1), get_base1(ylc,1,"ylc",1));
                        current_statement_begin__ = 586;
                        stan::math::assign(get_base1_lhs(cinlc_nc,1,"cinlc_nc",1), get_base1(ynlc,1,"ynlc",1));
                        current_statement_begin__ = 587;
                        for (int k = 2; k <= J; ++k) {
                            current_statement_begin__ = 588;
                            stan::math::assign(get_base1_lhs(surv_nc,k,"surv_nc",1), ((1 - (get_base1(ylc,k,"ylc",1) + get_base1(ynlc,k,"ynlc",1))) * get_base1(surv_nc,(k - 1),"surv_nc",1)));
                            current_statement_begin__ = 589;
                            stan::math::assign(get_base1_lhs(cilc_nc,k,"cilc_nc",1), (get_base1(cilc_nc,(k - 1),"cilc_nc",1) + (get_base1(ylc,k,"ylc",1) * get_base1(surv_nc,(k - 1),"surv_nc",1))));
                            current_statement_begin__ = 590;
                            stan::math::assign(get_base1_lhs(cinlc_nc,k,"cinlc_nc",1), (get_base1(cinlc_nc,(k - 1),"cinlc_nc",1) + (get_base1(ynlc,k,"ynlc",1) * get_base1(surv_nc,(k - 1),"surv_nc",1))));
                        }
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(surv_nc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(cinlc_nc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < J; ++k_0__) {
            vars__.push_back(cilc_nc[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(meanCumX[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
            vars__.push_back(meanWkyrs[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "cpum_bayesgf_20151029_time_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "g0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= 17; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 16; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 13; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 15; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "surv_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cinlc_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cilc_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanCumX" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanWkyrs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "a0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "c0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "g0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= 17; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 16; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "g" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 13; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 15; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "c" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "surv_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cinlc_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= J; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "cilc_nc" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanCumX" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "meanWkyrs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef cpum_bayesgf_20151029_time_model_namespace::cpum_bayesgf_20151029_time_model stan_model;

